<UserControl x:Class="Floyd_Warshall.View.UserControls.Algorithm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Floyd_Warshall.View.UserControls"
             xmlns:Converters="clr-namespace:Floyd_Warshall.View.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <Converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="40" />
            <RowDefinition Height="25" />
        </Grid.RowDefinitions>

        <Grid 
            Grid.Row="0"
            Visibility="{Binding IsInitialized, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition>
                    <ColumnDefinition.Style>
                        <Style TargetType="ColumnDefinition">
                            <Setter Property="Width" Value="*" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SteppedOnce}" Value="False">
                                    <Setter Property="Width" Value="0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ColumnDefinition.Style>
                </ColumnDefinition>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>


            <local:Matrix 
                Grid.Row="0" Grid.Column="0" 
                MatrixData="{Binding PrevD}" 
                UseConverter="true"
                Header="D" 
                K="{Binding PrevK}"
                IsPrev="true"
                Visibility="{Binding SteppedOnce, Converter={StaticResource BoolToVisibilityConverter}}" />
            <local:Matrix 
                Grid.Row="0" Grid.Column="1"
                MatrixData="{Binding D}" 
                UseConverter="true" 
                Header="D" 
                K="{Binding K}" />

            <local:Matrix 
                Grid.Row="1" Grid.Column="0" 
                MatrixData="{Binding PrevPi}" 
                Header="&#960;" 
                K="{Binding PrevK}"
                IsPrev="true"
                Visibility="{Binding SteppedOnce, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <local:Matrix 
                Grid.Row="1" Grid.Column="1" 
                MatrixData="{Binding Pi}"
                Header="&#960;" 
                K="{Binding K}" />
        </Grid>
       
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            
            <Button Grid.Column="0">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Margin"  Value="8,2"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsInitialized}" Value="False" >
                                <Setter Property="Content" Value="Initialize" />
                                <Setter Property="Command" Value="{Binding InitCommand}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsInitialized}" Value="True" >
                                <Setter Property="Content" Value="Cancel" />
                                <Setter Property="Command" Value="{Binding CancelCommand}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Grid.Column="1">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Margin"  Value="8,2"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsStopped}" Value="False" >
                                <Setter Property="Content" Value="Pause" />
                                <Setter Property="Command" Value="{Binding PauseCommand}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsStopped}" Value="True" >
                                <Setter Property="Content" Value="Start" />
                                <Setter Property="Command" Value="{Binding StartCommand}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Grid.Column="2" Content="Step" Command="{Binding StepCommand}" Margin="8,2"/>
            <TextBlock Grid.Column="3" Text="Speed" Foreground="Gray" VerticalAlignment="Center" HorizontalAlignment="Left" TextWrapping="Wrap" Margin="10,2"/>
            <Slider Grid.Column="4" Minimum="0" Maximum="2000" TickPlacement="BottomRight" TickFrequency="250" IsSnapToTickEnabled="True" Value="{Binding TimerInterval}"/>
        </Grid>

        <StatusBar Grid.Row="2">
            <StatusBarItem 
                DockPanel.Dock="Left" 
                Visibility="{Binding IsInitialized, Converter={StaticResource BoolToVisibilityConverter}}"
                Margin="10,0">
                <TextBlock Text="{Binding K, StringFormat=k: {0}}" />
            </StatusBarItem>
            <StatusBarItem 
                DockPanel.Dock="Right" 
                HorizontalAlignment="Right" 
                Visibility="{Binding IsNegCycleFound, Converter={StaticResource BoolToVisibilityConverter}}"
                Margin="10,0">
                <TextBlock 
                    Text="Negative cycle found!" />
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>